/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GAMEPLAYVIEWBASE_HPP
#define GAMEPLAYVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/gameplay_screen/GameplayPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class GameplayViewBase : public touchgfx::View<GameplayPresenter>
{
public:
    GameplayViewBase();
    virtual ~GameplayViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void tapLane1()
    {
        // Override and implement this function in Gameplay
    }
    virtual void tapLane2()
    {
        // Override and implement this function in Gameplay
    }
    virtual void tapLane3()
    {
        // Override and implement this function in Gameplay
    }
    virtual void tapLane4()
    {
        // Override and implement this function in Gameplay
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::BoxWithBorder lane1;
    touchgfx::BoxWithBorder lane2;
    touchgfx::BoxWithBorder lane3;
    touchgfx::BoxWithBorder lane4;
    touchgfx::ClickListener< touchgfx::Button > lane1Button;
    touchgfx::ClickListener< touchgfx::Button > lane2Button;
    touchgfx::ClickListener< touchgfx::Button > lane3Button;
    touchgfx::ClickListener< touchgfx::Button > lane4Button;
    touchgfx::BoxWithBorder tapNote;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::TextAreaWithOneWildcard feedbackText;

    /*
     * Wildcard Buffers
     */
    static const uint16_t FEEDBACKTEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar feedbackTextBuffer[FEEDBACKTEXT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<GameplayViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // GAMEPLAYVIEWBASE_HPP
